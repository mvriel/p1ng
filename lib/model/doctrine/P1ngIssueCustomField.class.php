<?php

/**
 * P1ngIssueCustomField
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    p1ng
 * @subpackage model
 * @author     Mike van Riel <mike.vanriel@naenius.com>
 * @version    SVN: $Id: Builder.php 7021 2010-01-12 20:39:49Z lsmith $
 */
class P1ngIssueCustomField extends BaseP1ngIssueCustomField
{
	/**
	 * After inserting a new row in the table, also insert a new column in the CustomRow table.
	 * 
	 * @see lib/vendor/symfony/lib/plugins/sfDoctrinePlugin/lib/vendor/doctrine/Doctrine/Doctrine_Record#postInsert()
	 */
	public function postInsert($event)
	{
		$type = $this->getDefinition()->getFieldType();
		$alter = array(
			'add' => array(
				$this->getFieldName() => array(
					'type' => $type
				)
			)
		);
		$connection = $this->getTable()->getConnection();
		$connection->export->alterTable('p1ng_issue_custom_row', $alter);
	}
	
	/**
	 * Inherit the options from the field definition and return a merged array
	 * 
	 * @see lib/model/doctrine/base/BaseP1ngIssueCustomField#getOptions()
	 */
	public function getWidgetOptions()
	{
		$parent = $this->getDefinition()->get('field_options');
		$options = parent::get('field_options');
		
		if (!$parent)
		{
			$parent = array();
		}
		if (!$options)
		{
			$options = array();
		}
		
		return array_merge($parent, $options);
	}

	/**
	 * Inherit the attributes from the field definition and return a merged array
	 * 
	 * @see lib/model/doctrine/base/BaseP1ngIssueCustomField#getAttributes()
	 */
	public function getWidgetAttributes()
	{
		$parent = $this->getDefinition()->get('field_attributes');
		$attributes = parent::get('field_attributes');
		
		if (!$parent)
		{
			$parent = array();
		}
		if (!$attributes)
		{
			$attributes = array();
		}
		
		return array_merge($parent, $attributes);
	}
	
	/**
	 * If no label is present in the database, use the one from the definition
	 * 
	 * @see lib/model/doctrine/base/BaseP1ngIssueCustomField#getLabel()
	 */
	public function getWidgetLabel()
	{
		$label = parent::getLabel();
		return (!$label) ? $this-getDefinition()->getLabel() : $label;
	}
	
	/**
	 * Return the name of the class for this field
	 * 
	 * @return string
	 */
	public function getWidgetClassName()
	{
		$definition = $this->getDefinition();
		return sfInflector::camelize('sf_widget_form_'.$definition->getWidget());
	}

	/**
	 * Return the name of the validator class for this field
	 * 
	 * @return string
	 */
	public function getValidatorClassName()
	{
		$definition = $this->getDefinition();
		return sfInflector::camelize('sf_validator_'.$definition->getValidator());
	}
}
