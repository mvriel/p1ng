P1ngSettings:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
    Signable:      ~
  columns:
    namespace:     { type: string, notnull: true }
    name:          { type: string, notnull: true }
    value:         { type: string }

P1ngCustomer:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
    Signable:      ~
  columns:
    code: { type: string(20), notnull: true, unique: true }
    name: { type: string, notnull: true }

P1ngProject:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
    Signable:      ~
    RowLevelAccess:
      callback: { method: getAllowedProjects }
  columns:
    p1ng_customer_id: { type: integer, notnull: true }
    code: { type: string(20), notnull: true, unique: true }
    name: { type: string(255), notnull: true }
  relations:
    P1ngCustomer: { foreignAlias: projects }

P1ngProjectUserPermission:
  actAs: [Timestampable]
  columns:
    sf_guard_user_id:       { type: integer(4), `primary: true }
    p1ng_project_id:        { type: integer, primary: true }
    sf_guard_permission_id: { type: integer(4), primary: true}
  relations:
    sfGuardUser:       ~
    P1ngProject:       ~
    sfGuardPermission: ~

P1ngProjectGroupPermission:
  actAs: [Timestampable]
  columns:
    sf_guard_group_id:      { type: integer(4), primary: true }
    p1ng_project_id:        { type: integer, primary: true }
    sf_guard_permission_id: { type: integer(4), primary: true}
  relations:
    sfGuardGroup:      ~
    P1ngProject:       ~
    sfGuardPermission: ~

P1ngIssueStatus:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
  columns:
    name:          { type: string, notnull: true }

P1ngWorkflow:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
  columns:
    p1ng_project_id:      { type: integer, notnull: true }
    p1ng_issue_status_id: { type: integer, notnull: true } # starting status of new issues
    name:                 { type: string(100), notnull: true }
  relations:
    P1ngProject:     ~
    P1ngIssueStatus: ~

P1ngIssueStatusTransition:
  actAs:
    Timestampable: ~
  columns:
    name:             { type: string(255), notnull: true }
    p1ng_workflow_id: { type: integer, notnull: true }
    from_id:          { type: integer, notnull: true }
    to_id:            { type: integer, notnull: true }
    expression:       { type: string }
  relations:
    From:         { class: P1ngIssueStatus, foreignAlias: to, local: from_id }
    To:           { class: P1ngIssueStatus, foreignAlias: from, local: to_id }
    P1ngWorkflow: ~

P1ngIssue:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
    Signable:      ~
    RowLevelAccess:
      field:    p1ng_project_id
      callback: { method: getAllowedProjects }
  columns:
    p1ng_project_id:      { type: integer, notnull: true }
    subject:              { type: string(255), notnull: true }
    p1ng_issue_status_id: { type: integer, notnull: true}
  relations:
    P1ngProject:     { foreignAlias: issues }
    P1ngIssueStatus: { foreignAlias: issues }

P1ngIssueLog:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
    Signable:      ~
  columns:
    p1ng_issue_id: { type: integer, notnull: true }
    text: clob
  relations:
    P1ngIssue: { foreignAlias: logs }

P1ngIssueCustomRow:
  columns:
    p1ng_issue_id: { type: integer, primary: true }
  relations:
    P1ngIssue: { foreignAlias: custom, foreignType: one }

P1ngIssueCustomField:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
    Signable:      ~
  columns:
    p1ng_issue_custom_field_definition_id: integer
    field_name: string(100)
    label:      string
    field_values:     string
    default_value:    string
    required:         boolean
    related_to_model: string
    related_to_field: string
    field_options:    array
    field_attributes: array
  relations:
    P1ngIssueCustomFieldDefinition: { foreignAlias: custom_field, alias: definition, foreignType: one }

P1ngIssueCustomFieldDefinition:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
  columns:
    name:             string
    label:            string
    description:      clob
    field_type:       string
    widget:
      type: enum
      values: [ input_text, textarea, number, enum, markdown ]
      default: input_text
      notnull: true
    validator:
      type: enum
      values: [ string ]
      default: string
    field_options: array
    field_attributes: array

P1ngRowLevelAccess:
  actAs:
    Timestampable: ~
    Signable:      ~
  columns:
    sf_guard_user_id:       { type: integer(4), notnull: true }
    sf_guard_permission_id: { type: integer(4), notnull: true }
    namespace:              { type: varchar(255), notnull: true }
    value:                  { type: varchar(255), notnull: true}
  relations:
    sfGuardUser:       ~
    sfGuardPermission: ~

P1ngProjectRole:
  actAs:
    Timestampable: ~
  columns:
    name:          string(255)
    description:   clob

P1ngProjectRoleUser:
  actAs:
    Timestampable: ~
    SoftDelete:    ~
    Signable:      ~
  columns:
    p1ng_project_id:      {type: integer, notnull: true, primary: true }
    p1ng_project_role_id: {type: integer, notnull: true, primary: true }
    sf_guard_user_id:     {type: integer(4), notnull: true, primary: true }
  relations:
    P1ngProject:     ~
    P1ngProjectRole: ~
    sfGuardUser:     ~

P1ngProjectRolePermission:
  actAs:
    Timestampable: ~
  columns:
    p1ng_project_role_id: {type: integer, notnull: true, primary: true }
    sf_guard_permission_id: { type: integer(4), notnull: true }
  relations:
    P1ngProjectRole: ~
    sfGuardPermission: ~
